1) JavaScript execution context

    consider the following program 

    var a = 2;
    function sqaure(num){
        var ans = num * num;
        return ans;
    }
    var squre2 = sqaure(a);
    var squre4 = sqaure(4);

    executionContext has two parts that is
    memory and code 
    in first phase of the execution a, sqaure2 and squre4 memory allocated with undefined values
    and squre memory allocated with function code 

    in second phase of the execution
    for functtion squre execution of square2 create separate execution context and ans with undefined values
    same for squre4  

    this is called as callstack/machine stack etc .
    first phase of the execution is global phase and other execution context is pushed and poped it according to need

    check in broswer source tab;

2) Hoisting

    It will give the access to the variables before initialization

    if function is defined as variable then memory will be allocated to it but it will give undefined error
    first executionContext 

3) How function works 
    refer code in index.js 
    for x, it will create a seperate memory allocation for each next phase of the execution/call stack
    
4) shortest JS program
    blank index.js, still it will create global execution context
    check on console 
        window
        this
        this === window 

    JS engine(eg. chromian) will create windows object in broswer;
    JS is loosely coupled variable system
    var a = undefined // wrong practice, avoid it
    
5) Scope chain and lexical environment

    code in index.js will print 15 because scope chain and lexical environment 
    lexical environment is current executionContext + parent executionContext. it has refernace of it's parent lexical environment 
    global executionContext -> parent refernace is null;

6) let and scope and error
    let can be hoisted like var but memory allocation to it on other than global executionContext
    let vaiables can be access after initialization of it 
    Temporal deadzone = time between let variable access and initialization of let variable

    var can be attached to window(window.varA) but let can't (window.letA)
    in global executionContext this points to window 
    in local executionContext this points to current executionContext 

    let a = 5;
    let a = 7; // it will give syntax error already defined stops further execution

    const is same as let variable Hoisting

    const a; // it will give syntax error
    const c = 1000;
    c = 10 // it will give type error 

    to avoid Temporal deadzone, please initialize all let variable on top of all 

    let and const are hoisted with Temporal deadzone;

7) Block scope and shadowing
     block is group of multiple statements used to call in single statements
     {
        var a = 1; // it hoisted on global executionContext
        let b = 2; // it hoisted on block executionContext
        const c = 3;  // it hoisted on block executionContext
     } 
     let and const can't access  outside the block scope because it is hoisted in block scope
     var can access outside the block scope because it is hoisted in global 
     var are function scope means var a in global scope and var a in function scope are different hoisted

8) closure  

    function along with lexical environment forms closure
    closure uses parents closure and so on. 
    it is not garbage 
    used in 
        Module design pattern
        curring
        memoize
        once 
        in async to maintain state 
        settimeout
        iteration

9) closure with set timeout 

10) function
        statement declaration
        expression 
        anonymous function
        first class function
        parameter vs argument
        
11) Callback function 
    Callback function is passing function as argument and parameter;
    JavaScript is synchronous and single threaded

    Callback function with firstclass function allows us to asynchronous task in JavaScript

    Need to remove eventListner for garbage collection because it uses memory
    higher order functions -> using function as argument or parameter

12) map filter reduce 
    map
        -> it used when transform whole array in to new variable

    filter 
        -> it used filter array element on basis of the condition to new variable

    reduce
        -> iterate all array elements and return a single value upon functionality


    make array of object {fnm,lnm,age}
    1) using map get array of object with full name
    2) using reduce get count of each age
    3) using chaining get fnm of age < 30